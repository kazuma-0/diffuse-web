const DEFAULT_PORT_NAMES={incoming:"webnativeRequest",outgoing:"webnativeResponse"};(function(g,c){typeof exports=="object"&&typeof exports.nodeName!="string"?c(exports,require("webnative")):c(g.webnativeElm={},g.webnative)})(typeof self!="undefined"?self:this,function(g,c){let d;const s=()=>d;g.request=function({app:n,request:e,getFs:o=s,portNames:t=DEFAULT_PORT_NAMES}){switch(e.context){case"WEBNATIVE":return a({app:n,portNames:t,request:e});case"WNFS":return u({app:n,getFs:o,portNames:t,request:e})}return{getFs:o,portNames:t}},g.setup=function({app:n,getFs:e=s,portNames:o=DEFAULT_PORT_NAMES,webnative:t}){if(t&&(c=t),!c)throw new Error("Failed to load webnative");if(!n.ports||!n.ports[o.incoming]){console.warn(`Couldn't find the incoming Elm port for webnative named "${o.incoming}". Could be that you haven't used the port yet, dead code elimination.`);return}return n.ports[o.outgoing]||console.warn(`Not sending webnative responses back to your Elm app, because the outgoing port named "${o.outgoing}" was not found. Could be that you haven't used the port yet, dead code elimination.`),n.ports[o.incoming].subscribe(r=>{g.request({request:r,app:n,getFs:e,portNames:o})}),{getFs:e,portNames:o}};function a({app:n,portNames:e,request:o}){Promise.resolve(c[o.method](...o.arguments)).then(t=>{switch(o.method){case"redirectToLobby":return;case"loadFileSystem":d=t;break;case"initialise":d=t.fs;break}n.ports[e.outgoing]&&n.ports[e.outgoing].send({tag:o.tag,error:null,method:o.method,data:t,context:o.context})}).catch(t=>{n.ports[e.outgoing]&&n.ports[e.outgoing].send({tag:o.tag,error:t.message||t,method:o.method,data:null,context:o.context})})}function u({app:n,getFs:e,portNames:o,request:t}){const r=t.method.replace(/_utf8$/,"");t.method==="write"&&(t.arguments=[t.arguments[0],Uint8Array.from(t.arguments[1])]),Promise.resolve(e()).then(i=>i[r](...t.arguments)).then(i=>{n.ports[o.outgoing]&&n.ports[o.outgoing].send({tag:t.tag,error:null,method:t.method,data:i.root?null:i.buffer?Array.from(i):i,context:t.context})}).catch(i=>{n.ports[o.outgoing]&&n.ports[o.outgoing].send({tag:t.tag,error:i.message||i,method:t.method,data:null,context:t.context})})}});
